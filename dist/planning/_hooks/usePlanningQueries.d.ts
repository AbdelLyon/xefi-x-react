export declare const usePlanningQueries: () => {
    resetFilters: () => void;
    refetchAll: () => Promise<void>;
    refetchSites: any;
    refetchTeams: any;
    refetchUsers: any;
    refetchTagsWithUsers: any;
    sitesData: any;
    teamsData: any;
    usersData: any;
    tagsWithUsersData: any;
    setSelectedSite: import('react').Dispatch<import('react').SetStateAction<string>>;
    setSelectedTeam: import('react').Dispatch<import('react').SetStateAction<string>>;
    setSelectedUser: import('react').Dispatch<import('react').SetStateAction<string>>;
    selectedSite: string;
    selectedTeam: string;
    selectedUser: string;
    siteSearch: string;
    teamSearch: string;
    userSearch: string;
    tagsWithUsersSearch: string;
    handleSiteSearchChange: (search?: string) => void;
    handleTeamSearchChange: (search?: string) => void;
    handleUserSearchChange: (search?: string) => void;
    handleTagsWithUsersSearchChange: (search: string) => void;
    siteOptions: any;
    teamOptions: any;
    userOptions: any;
    tagsWithUsersOptions: any;
    fetchNextSitePage: any;
    fetchNextTeamPage: any;
    fetchNextUserPage: any;
    fetchNextTagsWithUsersPage: any;
    hasNextSitePage: any;
    hasNextTeamPage: any;
    hasNextUserPage: any;
    hasNextTagsWithUsersPage: any;
    isFetchingNextSitePage: any;
    isFetchingNextTeamPage: any;
    isFetchingNextUserPage: any;
    isFetchingNextTagsWithUsersPage: any;
    isLoadingSite: any;
    isFetchingSite: any;
    isLoadingTeam: any;
    isFetchingTeam: any;
    isLoadingUser: any;
    isFetchingUser: any;
    isLoadingTagsWithUsers: any;
    isFetchingTagsWithUsers: any;
    isLoadingAny: any;
    isFetchingAny: any;
    siteError: any;
    teamError: any;
    userError: any;
    tagsWithUsersError: any;
    hasErrors: boolean;
};
